//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/AllInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @AllInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @AllInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""AllInput"",
    ""maps"": [
        {
            ""name"": ""Phone"",
            ""id"": ""4793f1b3-1c13-4d13-9498-ed7510c6482f"",
            ""actions"": [
                {
                    ""name"": ""TouchPres"",
                    ""type"": ""Button"",
                    ""id"": ""aa6b4f01-701a-4696-9bc3-ab06e533559d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPos"",
                    ""type"": ""Value"",
                    ""id"": ""677082e3-39e3-451f-98c7-9eef64daecd9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Gyroscope"",
                    ""type"": ""PassThrough"",
                    ""id"": ""053a54b1-e508-4278-accd-5caf6de14ae9"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""KeyUp"",
                    ""type"": ""Button"",
                    ""id"": ""784c408f-0c5b-4d75-8c63-d3c8e5072336"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""KeyDown"",
                    ""type"": ""Button"",
                    ""id"": ""e92b8446-bb95-422e-b5d8-4035f3898ec1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""KeyLeft"",
                    ""type"": ""Button"",
                    ""id"": ""ce23ffdc-c844-4c85-9598-e2e56076f690"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""KeyRight"",
                    ""type"": ""Button"",
                    ""id"": ""88dad5fd-7318-493e-8268-3994e344a38e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1760a31b-3a9c-471b-8dc7-eb08faa30547"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPres"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8f30146-2e30-4153-835a-efece8e46a5f"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d388bc78-104a-4927-806f-b6837139773d"",
                    ""path"": ""<Gyroscope>/angularVelocity"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gyroscope"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c0e945a-2a23-4f79-bd2f-968408c83d47"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c48e03f8-8849-439f-a3e0-b9107a05c7cf"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""334b5803-3eef-4d3f-b9bc-d4cbca53142e"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b4d3508-7b7b-4fec-95d2-02312e781733"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Phone
        m_Phone = asset.FindActionMap("Phone", throwIfNotFound: true);
        m_Phone_TouchPres = m_Phone.FindAction("TouchPres", throwIfNotFound: true);
        m_Phone_TouchPos = m_Phone.FindAction("TouchPos", throwIfNotFound: true);
        m_Phone_Gyroscope = m_Phone.FindAction("Gyroscope", throwIfNotFound: true);
        m_Phone_KeyUp = m_Phone.FindAction("KeyUp", throwIfNotFound: true);
        m_Phone_KeyDown = m_Phone.FindAction("KeyDown", throwIfNotFound: true);
        m_Phone_KeyLeft = m_Phone.FindAction("KeyLeft", throwIfNotFound: true);
        m_Phone_KeyRight = m_Phone.FindAction("KeyRight", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Phone
    private readonly InputActionMap m_Phone;
    private List<IPhoneActions> m_PhoneActionsCallbackInterfaces = new List<IPhoneActions>();
    private readonly InputAction m_Phone_TouchPres;
    private readonly InputAction m_Phone_TouchPos;
    private readonly InputAction m_Phone_Gyroscope;
    private readonly InputAction m_Phone_KeyUp;
    private readonly InputAction m_Phone_KeyDown;
    private readonly InputAction m_Phone_KeyLeft;
    private readonly InputAction m_Phone_KeyRight;
    public struct PhoneActions
    {
        private @AllInput m_Wrapper;
        public PhoneActions(@AllInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchPres => m_Wrapper.m_Phone_TouchPres;
        public InputAction @TouchPos => m_Wrapper.m_Phone_TouchPos;
        public InputAction @Gyroscope => m_Wrapper.m_Phone_Gyroscope;
        public InputAction @KeyUp => m_Wrapper.m_Phone_KeyUp;
        public InputAction @KeyDown => m_Wrapper.m_Phone_KeyDown;
        public InputAction @KeyLeft => m_Wrapper.m_Phone_KeyLeft;
        public InputAction @KeyRight => m_Wrapper.m_Phone_KeyRight;
        public InputActionMap Get() { return m_Wrapper.m_Phone; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PhoneActions set) { return set.Get(); }
        public void AddCallbacks(IPhoneActions instance)
        {
            if (instance == null || m_Wrapper.m_PhoneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PhoneActionsCallbackInterfaces.Add(instance);
            @TouchPres.started += instance.OnTouchPres;
            @TouchPres.performed += instance.OnTouchPres;
            @TouchPres.canceled += instance.OnTouchPres;
            @TouchPos.started += instance.OnTouchPos;
            @TouchPos.performed += instance.OnTouchPos;
            @TouchPos.canceled += instance.OnTouchPos;
            @Gyroscope.started += instance.OnGyroscope;
            @Gyroscope.performed += instance.OnGyroscope;
            @Gyroscope.canceled += instance.OnGyroscope;
            @KeyUp.started += instance.OnKeyUp;
            @KeyUp.performed += instance.OnKeyUp;
            @KeyUp.canceled += instance.OnKeyUp;
            @KeyDown.started += instance.OnKeyDown;
            @KeyDown.performed += instance.OnKeyDown;
            @KeyDown.canceled += instance.OnKeyDown;
            @KeyLeft.started += instance.OnKeyLeft;
            @KeyLeft.performed += instance.OnKeyLeft;
            @KeyLeft.canceled += instance.OnKeyLeft;
            @KeyRight.started += instance.OnKeyRight;
            @KeyRight.performed += instance.OnKeyRight;
            @KeyRight.canceled += instance.OnKeyRight;
        }

        private void UnregisterCallbacks(IPhoneActions instance)
        {
            @TouchPres.started -= instance.OnTouchPres;
            @TouchPres.performed -= instance.OnTouchPres;
            @TouchPres.canceled -= instance.OnTouchPres;
            @TouchPos.started -= instance.OnTouchPos;
            @TouchPos.performed -= instance.OnTouchPos;
            @TouchPos.canceled -= instance.OnTouchPos;
            @Gyroscope.started -= instance.OnGyroscope;
            @Gyroscope.performed -= instance.OnGyroscope;
            @Gyroscope.canceled -= instance.OnGyroscope;
            @KeyUp.started -= instance.OnKeyUp;
            @KeyUp.performed -= instance.OnKeyUp;
            @KeyUp.canceled -= instance.OnKeyUp;
            @KeyDown.started -= instance.OnKeyDown;
            @KeyDown.performed -= instance.OnKeyDown;
            @KeyDown.canceled -= instance.OnKeyDown;
            @KeyLeft.started -= instance.OnKeyLeft;
            @KeyLeft.performed -= instance.OnKeyLeft;
            @KeyLeft.canceled -= instance.OnKeyLeft;
            @KeyRight.started -= instance.OnKeyRight;
            @KeyRight.performed -= instance.OnKeyRight;
            @KeyRight.canceled -= instance.OnKeyRight;
        }

        public void RemoveCallbacks(IPhoneActions instance)
        {
            if (m_Wrapper.m_PhoneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPhoneActions instance)
        {
            foreach (var item in m_Wrapper.m_PhoneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PhoneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PhoneActions @Phone => new PhoneActions(this);
    public interface IPhoneActions
    {
        void OnTouchPres(InputAction.CallbackContext context);
        void OnTouchPos(InputAction.CallbackContext context);
        void OnGyroscope(InputAction.CallbackContext context);
        void OnKeyUp(InputAction.CallbackContext context);
        void OnKeyDown(InputAction.CallbackContext context);
        void OnKeyLeft(InputAction.CallbackContext context);
        void OnKeyRight(InputAction.CallbackContext context);
    }
}
